!function(t,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define("matrix",[],r):"object"==typeof exports?exports.matrix=r():t.matrix=r()}(window,(function(){return function(t){var r={};function n(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:e})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,r){if(1&r&&(t=n(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var o in t)n.d(e,o,function(r){return t[r]}.bind(null,o));return e},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,"a",r),r},n.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},n.p="",n(n.s=2)}([function(t,r,n){window,t.exports=function(t){var r={};function n(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:e})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,r){if(1&r&&(t=n(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var o in t)n.d(e,o,function(r){return t[r]}.bind(null,o));return e},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,"a",r),r},n.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},n.p="",n(n.s=0)}([function(t,r,n){"use strict";var e=this&&this.__spreadArrays||function(){for(var t=0,r=0,n=arguments.length;r<n;r++)t+=arguments[r].length;var e=Array(t),o=0;for(r=0;r<n;r++)for(var u=arguments[r],i=0,a=u.length;i<a;i++,o++)e[o]=u[i];return e};function o(t){return function(r){return t}}function u(t){return function(r){return r.map(t)}}function i(t){return function(r){return r.map((function(r,n){return t(r)(n)}))}}function a(t){return function(r){var n;return(n={})[t]=r,n}}function c(t){return function(r){return Array.apply(null,Array(r-t)).map((function(r,n){return t+n}))}}function f(t){return function(r){return Math.floor(Math.random()*r)+t}}Object.defineProperty(r,"__esModule",{value:!0}),r.dropFirst=function(t){return t.slice(1)},r.dropLast=function(t){return t.slice(0,t.length-1)},r.id=function(t){return t},r.keep=o,r.map=u,r.mapi=i,r.adjust=function(t){return function(r){return function(n){return i((function(n){return function(e){return e===t?r(n):n}}))(n)}}},r.merge=function(t){var r=Array.isArray(t)?[]:{};return function(n){return Object.assign(r,t,n)}},r.mod=function(t){return function(r){return(r%t+t)%t}},r.objOf=a,r.pipe=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return function(r){return e(t).reduce((function(t,r){return r(t)}),r)}},r.prop=function(t){return function(r){return r[t]}},r.range=c,r.repeat=function(t){return function(r){return u(o(t))(c(0)(r))}},r.randomInt=f,r.random=function(t){if(Array.isArray(t))return t[f(0)(t.length)];if("number"==typeof t)return function(r){return Math.random()*r+t};throw Error("Incompatible parameter type: "+typeof t)},r.spec=function(t){return function(r){return Object.keys(t).map((function(n){return a(n)(t[n](r))})).reduce((function(t,r){return Object.assign(t,r)}))}},r.mapRange=function(t){return function(r,n){return function(e,o){return(t-r)*(o-e)/(n-r)+e}}}}])},function(t,r,n){"use strict";var e=this&&this.__read||function(t,r){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var e,o,u=n.call(t),i=[];try{for(;(void 0===r||r-- >0)&&!(e=u.next()).done;)i.push(e.value)}catch(t){o={error:t}}finally{try{e&&!e.done&&(n=u.return)&&n.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],r=0;r<arguments.length;r++)t=t.concat(e(arguments[r]));return t};Object.defineProperty(r,"__esModule",{value:!0});var u=n(0),i=n(5);r.toRadians=function(t){return t*Math.PI/180};var a=function(){function t(t){this.values=t,this.values=t}return t.create=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return new t(r)},t.fill=function(r,n){return new t(u.repeat(r)(n))},t.random2D=function(r){var n=new t([1,0]).rotate(u.random(0)(2*Math.PI));return null!=r?n.setMag(r):n},t.heading=function(t){return Math.atan2(t[1],t[0])},t.normalize=function(r){return t.setMag(r,1)},t.rotate=function(t,r){return[t[0]*Math.cos(r)-t[1]*Math.sin(r),t[0]*Math.sin(r)+t[1]*Math.cos(r)]},t.getMag=function(t){return Math.sqrt(t.reduce((function(t,r){return t+r*r}),0))},t.setMag=function(r,n){var e=t.getMag(r);return r.map((function(t){return t/e*n}))},t.limit=function(r,n){return t.getMag(r)>n?t.setMag(r,n):r},t.dist=function(t,r){return Math.sqrt(t.reduce((function(t,n,e){return t+Math.pow(r[e]-n,2)}),0))},t.add=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];if(r.length<=1)return 1===r.length?r[0]:[];var e=r[0],i=t.add.apply(t,o(u.dropFirst(r)));return e.map((function(t,r){return t+i[r]}))},t.subtract=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];if(r.length<=1)return 1===r.length?r[0]:[];var e=r[0],i=t.add.apply(t,o(u.dropFirst(r)));return e.map((function(t,r){return t-i[r]}))},t.mult=function(t){for(var r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];var e=1===r.length?r[0]:r.reduce((function(t,r){return t*r}),1);return t.map((function(t){return t*e}))},t.dotProduct=function(t,r){return t.reduce((function(t,n,e){return t+n*r[e]}),0)},t.prototype[Symbol.iterator]=function(){return this.getIterator()},t.prototype.getIterator=function(){return new i.VectorIterator(this)},t.prototype.get=function(t){return this.values[t]},t.prototype.toArray=function(){return o(this.values)},Object.defineProperty(t.prototype,"magnitude",{get:function(){return null!=this._magnitude?this._magnitude:this._magnitude=t.getMag(this.values)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"heading",{get:function(){return t.heading(this.values)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"length",{get:function(){return this.values.length},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"x",{get:function(){return this.values[0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.values[1]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"z",{get:function(){return this.values[2]},enumerable:!0,configurable:!0}),t.prototype.normalize=function(){return this.setMag(1)},t.prototype.rotate=function(r){return new t(t.rotate(this.values,r))},t.prototype.setMag=function(r){return new t(t.mult(this.values,r/this.magnitude))},t.prototype.limit=function(t){return this.magnitude>t?this.setMag(t):this},t.prototype.dist=function(r){return t.dist(this.values,r.values)},t.prototype.add=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return r.length<1?this:new t(t.add.apply(t,o([this.values],r.map((function(t){return t.values})))))},t.prototype.subtract=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return r.length<1?this:new t(t.subtract.apply(t,o([this.values],r.map((function(t){return t.values})))))},t.prototype.mult=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return new t(t.mult.apply(t,o([this.values],r)))},t.prototype.copy=function(){return new t(this.values)},t.prototype.dotProduct=function(r){return t.dotProduct(this.values,r.values)},t}();r.Vector=a},function(t,r,n){n(3),t.exports=n(1)},function(t,r,n){"use strict";var e=this&&this.__read||function(t,r){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var e,o,u=n.call(t),i=[];try{for(;(void 0===r||r-- >0)&&!(e=u.next()).done;)i.push(e.value)}catch(t){o={error:t}}finally{try{e&&!e.done&&(n=u.return)&&n.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],r=0;r<arguments.length;r++)t=t.concat(e(arguments[r]));return t};Object.defineProperty(r,"__esModule",{value:!0});var u=n(0),i=n(4),a=n(1);function c(t,r){throw Error("Matrices are not the right dimensions: a:"+t.rows+"x"+t.cols+" b:"+r.rows+"x"+r.cols)}function f(t){for(var r=[],n=0;n<t;n++)r[n]=u.repeat(0)(t),r[n][n]=1;return r}var s=function(){function t(t){this.values=t}return t.create=function(r){return new t(r.map((function(t){return o(t)})))},t.identity=function(r){return t.create(f(r))},t.rotation=function(r,n,e){return void 0===r&&(r=2),void 0===n&&(n=0),void 0===e&&(e=1),function(o){var u=f(r);return u[n][n]=u[e][e]=Math.cos(o),u[n][e]=(n+e%2===0?1:-1)*Math.sin(o),u[e][n]=(n+e%2===0?-1:1)*Math.sin(o),t.create(u)}},t.rotationX=function(r){return t.rotation(r,1,2)},t.rotationY=function(r){return t.rotation(r,0,2)},t.rotationZ=function(r){return t.rotation(r,0,1)},t.prototype[Symbol.iterator]=function(){return this.getIterator()},t.prototype.getIterator=function(){return new i.MatrixIterator(this)},Object.defineProperty(t.prototype,"rows",{get:function(){return this.values.length},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"cols",{get:function(){return this.values[0].length},enumerable:!0,configurable:!0}),t.prototype.get=function(t,r){return null==r?this.values[t]:this.values[t][r]},t.prototype.add=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];if(r.length<1)return this;var e=r[0];if(this.rows!==e.rows||this.cols!==e.cols)throw c(this,e);var i=new t(this.values.map((function(t,r){return a.Vector.add(t,e.get(r))})));return i.add.apply(i,o(u.dropFirst(r)))},t.prototype.subtract=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];if(t.length<1)return this;var n=this.add(t[0].scalarMult(-1));return n.subtract.apply(n,o(u.dropFirst(t)))},t.prototype.scalarMult=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];var e=r.reduce((function(t,r){return t*r}),1);return new t(this.values.map((function(t){return a.Vector.mult(t,e)})))},t.prototype.transpose=function(){for(var r=[],n=0;n<this.cols;n++){r[n]=[];for(var e=0;e<this.rows;e++)r[n][e]=this.get(e,n)}return t.create(r)},t.prototype.mult=function(){for(var r,n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];if(n.length<1)return this;var i=n[0];if(this.cols!==i.rows)throw c(this,i);for(var f=i.transpose(),s=[],l=0;l<this.rows;l++){s[l]=[];for(var p=0;p<i.cols;p++)s[l][p]=a.Vector.dotProduct(this.values[l],f.get(p))}return(r=t.create(s)).mult.apply(r,o(u.dropFirst(n)))},t.prototype.copy=function(){return new t(this.values.map((function(t){return o(t)})))},t.prototype.toReadonlyArray=function(){return this.values},t.prototype.toArray=function(){return this.values.map((function(t){return o(t)}))},t}();r.Matrix=s},function(t,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var e=function(){function t(t){this.matrix=t,this.count=0,this.total=this.matrix.rows*this.matrix.cols}return t.prototype[Symbol.iterator]=function(){return this},t.prototype.next=function(){var t=this.index(this.count++),r=this.count>this.total;return{value:r?void 0:this.matrix.get(t.row,t.col),done:r}},t.prototype.index=function(t){return{col:t%this.matrix.cols,row:Math.floor(t/this.matrix.cols)}},t}();r.MatrixIterator=e},function(t,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var e=function(){function t(t){this.vector=t,this.index=0}return t.prototype[Symbol.iterator]=function(){return this},t.prototype.next=function(){return{value:this.vector.get(this.index++),done:this.index>this.vector.length}},t}();r.VectorIterator=e}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,