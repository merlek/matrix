!function(t,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define("matrix",[],r):"object"==typeof exports?exports.matrix=r():t.matrix=r()}(window,(function(){return function(t){var r={};function n(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:e})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,r){if(1&r&&(t=n(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var o in t)n.d(e,o,function(r){return t[r]}.bind(null,o));return e},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,"a",r),r},n.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},n.p="",n(n.s=2)}([function(t,r,n){window,t.exports=function(t){var r={};function n(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:e})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,r){if(1&r&&(t=n(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var o in t)n.d(e,o,function(r){return t[r]}.bind(null,o));return e},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,"a",r),r},n.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},n.p="",n(n.s=0)}([function(t,r,n){"use strict";var e=this&&this.__spreadArrays||function(){for(var t=0,r=0,n=arguments.length;r<n;r++)t+=arguments[r].length;var e=Array(t),o=0;for(r=0;r<n;r++)for(var u=arguments[r],i=0,a=u.length;i<a;i++,o++)e[o]=u[i];return e};function o(t){return function(r){return t}}function u(t){return function(r){return r.map(t)}}function i(t){return function(r){return r.map((function(r,n){return t(r)(n)}))}}function a(t){return function(r){var n;return(n={})[t]=r,n}}function f(t){return function(r){return Array.apply(null,Array(r-t)).map((function(r,n){return t+n}))}}function c(t){return function(r){return Math.floor(Math.random()*r)+t}}Object.defineProperty(r,"__esModule",{value:!0}),r.dropFirst=function(t){return t.slice(1)},r.dropLast=function(t){return t.slice(0,t.length-1)},r.id=function(t){return t},r.keep=o,r.map=u,r.mapi=i,r.adjust=function(t){return function(r){return function(n){return i((function(n){return function(e){return e===t?r(n):n}}))(n)}}},r.merge=function(t){var r=Array.isArray(t)?[]:{};return function(n){return Object.assign(r,t,n)}},r.mod=function(t){return function(r){return(r%t+t)%t}},r.objOf=a,r.pipe=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return function(r){return e(t).reduce((function(t,r){return r(t)}),r)}},r.prop=function(t){return function(r){return r[t]}},r.range=f,r.repeat=function(t){return function(r){return u(o(t))(f(0)(r))}},r.randomInt=c,r.random=function(t){if(Array.isArray(t))return t[c(0)(t.length)];if("number"==typeof t)return function(r){return Math.random()*r+t};throw Error("Incompatible parameter type: "+typeof t)},r.spec=function(t){return function(r){return Object.keys(t).map((function(n){return a(n)(t[n](r))})).reduce((function(t,r){return Object.assign(t,r)}))}},r.mapRange=function(t){return function(r,n){return function(e,o){return(t-r)*(o-e)/(n-r)+e}}}}])},function(t,r,n){"use strict";var e=this&&this.__spreadArrays||function(){for(var t=0,r=0,n=arguments.length;r<n;r++)t+=arguments[r].length;var e=Array(t),o=0;for(r=0;r<n;r++)for(var u=arguments[r],i=0,a=u.length;i<a;i++,o++)e[o]=u[i];return e};Object.defineProperty(r,"__esModule",{value:!0});var o=n(0);r.toRadians=function(t){return t*Math.PI/180};var u=function(){function t(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];this.values=e(t)}return t.create=function(r,n){void 0===r&&(r=0),void 0===n&&(n=0);for(var o=[],u=2;u<arguments.length;u++)o[u-2]=arguments[u];return new(t.bind.apply(t,e([void 0,r,n],o)))},t.fill=function(r,n){return new(t.bind.apply(t,e([void 0],o.repeat(r)(n))))},t.random2D=function(r){return new t(1,0).rotate(o.random(0)(2*Math.PI)).setMag(r)},Object.defineProperty(t.prototype,"magnitude",{get:function(){return null!=this._magnitude?this._magnitude:this._magnitude=Math.sqrt(this.values.reduce((function(t,r){return t+Math.pow(r,2)}),0))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"heading",{get:function(){return Math.atan2(this.y,this.x)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"length",{get:function(){return this.values.length},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"x",{get:function(){return this.values[0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.values[1]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"z",{get:function(){return this.values[2]},enumerable:!0,configurable:!0}),t.prototype.normalize=function(){return this.setMag(1)},t.prototype.rotate=function(r){return new t(this.x*Math.cos(r)-this.y*Math.sin(r),this.x*Math.sin(r)+this.y*Math.cos(r))},t.prototype.setMag=function(r){var n=this;return null!=r?new(t.bind.apply(t,e([void 0],this.values.map((function(t){return t/n.magnitude*r}))))):this},t.prototype.limit=function(t){return this.magnitude>t?this.setMag(t):this},t.prototype.dist=function(t){return Math.sqrt(this.values.reduce((function(r,n,e){return r+Math.pow(t.values[e]-n,2)}),0))},t.prototype.add=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];if(r.length<1)return this;var u=new(t.bind.apply(t,e([void 0],this.values.map((function(t,n){return t+r[0].values[n]})))));return u.add.apply(u,o.dropFirst(r))},t.prototype.subtract=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];if(t.length<1)return this;var n=this.add(t[0].mult(-1));return n.subtract.apply(n,o.dropFirst(t))},t.prototype.mult=function(r){for(var n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];return r*=n.length>0?n.reduce((function(t,r){return t*r}),1):1,new(t.bind.apply(t,e([void 0],this.values.map((function(t){return t*r})))))},t.prototype.copy=function(){return new(t.bind.apply(t,e([void 0],this.values)))},t.prototype.dotProduct=function(t){return this.values.reduce((function(r,n,e){return r+n*t.values[e]}),0)},t}();r.Vector=u},function(t,r,n){n(3),t.exports=n(1)},function(t,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var e=n(0),o=n(1);function u(t,r){throw Error("Matrices are not the right dimensions: a:"+t.m+"x"+t.n+" b:"+r.m+"x"+r.n)}function i(t){for(var r=[],n=0;n<t;n++)r[n]=e.repeat(0)(t),r[n][n]=1;return r}var a=function(){function t(t){this.values=t.map((function(t){return t.copy()}))}return t.create=function(r){return new t(r.map((function(t){return o.Vector.create.apply(o.Vector,t)})))},t.identity=function(r){return t.create(i(r))},t.rotation=function(r,n,e,u){var a=i(n),f=o.toRadians(r);return a[e][e]=a[u][u]=Math.cos(f),a[e][u]=-1*(a[u][e]=Math.sin(f)),t.create(a)},t.rotationX=function(r,n){return void 0===n&&(n=3),t.rotation(r,n,1,2)},t.rotationY=function(r,n){return void 0===n&&(n=3),t.rotation(r,n,0,2)},t.rotationZ=function(r,n){return void 0===n&&(n=3),t.rotation(r,n,0,1)},Object.defineProperty(t.prototype,"m",{get:function(){return this.values.length},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"n",{get:function(){return this.values[0].length},enumerable:!0,configurable:!0}),t.prototype.add=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];if(r.length<1)return this;var o=r[0];if(this.m!==o.m||this.n!==o.n)throw u(this,o);var i=new t(this.values.map((function(t,r){return t.add(o[r])})));return i.add.apply(i,e.dropFirst(r))},t.prototype.subtract=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];if(t.length<1)return this;var n=this.add(t[0].scalarMult(-1));return n.subtract.apply(n,e.dropFirst(t))},t.prototype.scalarMult=function(r){return new t(this.values.map((function(t){return t.mult(r)})))},t.prototype.transpose=function(){for(var r=[],n=0;n<this.n;n++){r[n]=[];for(var e=0;e<this.m;e++)r[n][e]=this[e][n]}return t.create(r)},t.prototype.mult=function(){for(var r,n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];if(n.length<1)return this;var i=n[0];if(this.n!==i.m)throw u(this,i);for(var a=i.transpose(),f=[],c=0;c<this.m;c++){f[c]=[];for(var p=0;p<i.n;p++)f[c][p]=this[c].dotProduct(a[p])}return(r=t.create(f)).mult.apply(r,e.dropFirst(n))},t.prototype.copy=function(){return new t(this.values.map((function(t){return t.copy()})))},t}();r.Matrix=a}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,